#!/bin/bash

__DIRNAME=$(pwd) # 假设当前目录就是源文件所在的目录
__CMAKELISTS=CMakeLists.txt
__COMPILECOMMAND=compile_commands.json

# 定义一个函数，它接受一个节名，比如[twitter]，并解析它的内容，返回一个json对象
function parse_section() {
  local section=$1
  local relsource=""
  local source=""
  local include=""
  local flags=""
  local file=""
  local json=""

  # 读取每一行，直到遇到空行或者文件结束
  while read -r line; do
    if [[ -z $line ]]; then
      break # 遇到空行，跳出循环
    fi
    # 根据等号分割键和值
    IFS='=' read -r key value <<< "$line"
    # 根据键的不同，赋值给相应的变量
    case $key in
      source)
        relsource=$(eval echo $value)
        arr=($relsource)
        source=$(realpath $__DIRNAME/${arr[0]})
        ;;
      include)
        include=$(realpath $__DIRNAME/$value)
        ;;
      flags)
        flags=$value
        ;;
      *)
        echo "无效的键: $key" >&2
        exit 1
        ;;
    esac
  done

  # 检查source是否为空
  if [[ -z $source ]]; then
    echo "缺少source键" >&2
    exit 1
  fi
  # 从source中提取文件名
  file=$(basename "$source")
  directory=$(dirname "$source")

  json=$(echo "{ \"directory\": \"${source}\", \"arguments\": [ \"/usr/bin/clang++\", \"-std=c++17\", \"-I${include}\", \"-c\", \"${relsource}\", \"-o\", \"${file%.*}.o\" ], \"file\": \"$file\" }")

  # 输出cmakelists.txt
  echo "add_executable(${section} ${relsource})" >>  $__CMAKELISTS
  if [[ ! -z "$source" ]]; then
    echo "target_include_directories(${section} PRIVATE ${include})" >> $__CMAKELISTS
  fi
  # 返回json对象
  echo "$json"
}


# cmakelists
echo "cmake_minimum_required(VERSION 3.20)" > $__CMAKELISTS
echo "project(example)" >> $__CMAKELISTS
echo "set(CMAKE_CXX_STANDARD 17)" >> $__CMAKELISTS
echo "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)" >> $__CMAKELISTS
# compile_commands.json
echo "[" > $__COMPILECOMMAND
first=true
# 读取标准输入，直到文件结束
while read -r line; do
  # 检查是否是一个节的开始，比如[twitter]
  if [[ $line =~ ^\[(.*)\]$ ]]; then
    # 提取节名，比如twitter
    section=${BASH_REMATCH[1]}
    # 调用parse_section函数，传入节名，得到一个json对象
    json_object=$(parse_section "$section")
    # 把json对象添加到json数组中
    if [ "$first" = true ]; then
      # 将json对象追加到compile_commands.json文件中，不用逗号分隔
      echo "$json_object" >> $__COMPILECOMMAND
      # 将标识位变量设为false
      first=false
    else
      # 将json对象追加到compile_commands.json文件中，用逗号分隔
      echo ",$json_object" >> $__COMPILECOMMAND
    fi
  fi
done
echo "]" >> $__COMPILECOMMAND