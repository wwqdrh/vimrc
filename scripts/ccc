#!/bin/bash

__DIRNAME=$(pwd) # 假设当前目录就是源文件所在的目录
__CMAKELISTS=CMakeLists.txt
__COMPILECOMMAND=compile_commands.json


function compile() {
    if [ -z "$1" ]; then
        echo "Usage: $0 compile <name>"
        return 1
    fi

    if [ ! -f "$1" ]; then
        echo "$1 not a file"
        return 1
    fi
    
    # cmakelists
    echo "cmake_minimum_required(VERSION 3.20)" > $__CMAKELISTS
    echo "project(example)" >> $__CMAKELISTS
    echo "set(CMAKE_EXPORT_COMPILE_COMMANDS ON)" >> $__CMAKELISTS
    # compile_commands.json
    echo "[" > $__COMPILECOMMAND
    first=true
    # 读取标准输入，直到文件结束
    while read -r line; do
      # 检查是否是一个节的开始，比如[twitter]
      if [[ $line =~ ^\[(.*)\]$ ]]; then
        # 提取节名，比如twitter
        section=${BASH_REMATCH[1]}
        # 调用parse_section函数，传入节名，得到一个json对象
        json_object=$(parse_section "$section")
        # 把json对象添加到json数组中
        if [ "$first" = true ]; then
          # 将json对象追加到compile_commands.json文件中，不用逗号分隔
          echo "$json_object" >> $__COMPILECOMMAND
          # 将标识位变量设为false
          first=false
        else
          # 将json对象追加到compile_commands.json文件中，用逗号分隔
          echo ",$json_object" >> $__COMPILECOMMAND
        fi
      fi
    done < "$1"
    echo "]" >> $__COMPILECOMMAND
}


# 定义一个函数，它接受一个节名，比如[twitter]，并解析它的内容，返回一个json对象
function parse_section() {
  local section=$1
  local relsource=""
  local source=""
  local include=""
  local flags=""
  local language=""
  local file=""
  local json=""

  # 读取每一行，直到遇到空行或者文件结束
  while read -r line; do
    if [[ -z $line ]]; then
      break # 遇到空行，跳出循环
    fi
    # 根据等号分割键和值
    IFS='=' read -r key value <<< "$line"
    # 根据键的不同，赋值给相应的变量
    case $key in
      source)
        relsource=$(eval echo $value)
        arr=($relsource)
        source=$(realpath $__DIRNAME/${arr[0]})
        ;;
      include)
        include=$(realpath $__DIRNAME/$value)
        ;;
      language)
        language=$value
        ;;
      flags)
        flags=$value
        ;;
      *)
        echo "无效的键: $key" >&2
        exit 1
        ;;
    esac
  done

  # 检查source是否为空
  if [[ -z $source ]]; then
    echo "缺少source键" >&2
    exit 1
  fi
  # 从source中提取文件名
  file=$(basename "$source")
  directory=$(dirname "$source")
  compiler=$(get_compiler "$language")

  json=$(echo "{ \"directory\": \"${source}\", \"arguments\": [ \"${compiler}\", \"-std=${language}\", \"${flags}\", \"-I${include}\", \"-c\", \"${relsource}\", \"-o\", \"${file%.*}.o\" ], \"file\": \"$file\" }")

  # 输出cmakelists.txt
  echo "add_executable(${section} ${relsource})" >>  $__CMAKELISTS
  language2proper ${language} ${section}
  echo "target_compile_definitions(${section} PRIVATE ${flags})" >>   $__CMAKELISTS
  if [[ ! -z "$source" ]]; then
    echo "target_include_directories(${section} PRIVATE ${include})" >> $__CMAKELISTS
  fi
  # 返回json对象
  echo "$json"
}

function get_compiler() {
    local lang="$1"
    case "$lang" in
        c++11|c++14|c++17|c++20|c++23|c++)
            echo "/usr/bin/g++"
            ;;
        c99|c11|c)
            echo "/usr/bin/gcc"
            ;;
        *)
            echo "Invalid language: $lang" >&2
            return 1
    esac
}

function language2proper() {
    local lang="$1"
    local section="$2"
    local properties=""
    case "$lang" in
        c++11)
            properties="CXX_STANDARD 11 CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF"
            echo "target_compile_features(${section} PUBLIC ${properties})" >> $__CMAKELISTS
            ;;
        c++14)
            properties="CXX_STANDARD 14 CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF"
            echo "target_compile_features(${section} PUBLIC ${properties})" >> $__CMAKELISTS
            ;;
        c++17)
            properties="CXX_STANDARD 17 CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF"
            echo "target_compile_features(${section} PUBLIC ${properties})" >> $__CMAKELISTS
            ;;
        c++20)
            properties="CXX_STANDARD 20 CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF"
            echo "target_compile_features(${section} PUBLIC ${properties})" >> $__CMAKELISTS
            ;;
        c++|c++23)
            properties="CXX_STANDARD 23 CXX_STANDARD_REQUIRED ON CXX_EXTENSIONS OFF"
            echo "target_compile_features(${section} PUBLIC ${properties})" >> $__CMAKELISTS
            ;;
        c99)
            echo "set_target_properties(${section} PROPERTIES
                C_STANDARD 99
                C_STANDARD_REQUIRED ON
                C_EXTENSIONS OFF
            )" >> $__CMAKELISTS
            ;;
        c11|c)
            echo "set_target_properties(${section} PROPERTIES
                C_STANDARD 11
                C_STANDARD_REQUIRED ON
                C_EXTENSIONS OFF
            )" >> $__CMAKELISTS
            ;;
        *)
            echo "Invalid language standard: $lang" >&2
            return 1
    esac
}

function build() {
    cmake -S . -B build
    make -C build "$1"
}

function build_debug() {
  cmake -D CMAKE_BUILD_TYPE=debug -S . -B build
  make -C build "$1"
}

function run() {
    if [ -z "$1" ]; then
        echo "Usage: $0 run <name>"
        return 1
    fi
    ./build/"$1"
}

case "$1" in
    c)
        compile "$2"
        ;;
    b)
        build "$2"
        ;;
    bd)
        build_debug "$2"
        ;;
    r)
        run "$2"
        ;;
    br)
        build "$2"
        run "$2"
        ;;
    *)
        echo "Usage: $0 <command> <name>"
        echo "Commands: compile, build, run"
        exit 1
        ;;
esac
